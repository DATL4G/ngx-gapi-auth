{"version":3,"file":"ngx-gapi-auth2.js","sources":["ng://ngx-gapi-auth2/lib/config/google-api.config.ts","ng://ngx-gapi-auth2/lib/models/auth.ts","ng://ngx-gapi-auth2/lib/services/google-api-loader.service.ts","ng://ngx-gapi-auth2/lib/services/google-auth2-loader.service.ts","ng://ngx-gapi-auth2/lib/services/google-auth.service.ts","ng://ngx-gapi-auth2/lib/common-util-google-oauth.module.ts"],"sourcesContent":["export interface NgGapiClientConfig {\n\n  /**\n   * User for mocking auth flow to local storage save\n   */\n  e2e: boolean;\n\n  /**\n   * The app's client ID, found and created in the Google Developers Console.\n   */\n  client_id: string;\n\n  /**\n   * The domains for which to create sign-in cookies. Either a URI, single_host_origin, or none.\n   * Defaults to single_host_origin if unspecified.\n   */\n  cookie_policy?: string;\n\n  /**\n   * The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false.\n   */\n  scope?: string;\n\n  /**\n   * Fetch users' basic profile information when they sign in. Adds 'profile' and 'email' to the requested scopes. True if unspecified.\n   */\n  fetch_basic_profile?: boolean;\n\n  /**\n   * The Google Apps domain to which users must belong to sign in. This is susceptible to modification by clients,\n   * so be sure to verify the hosted domain property of the returned user. Use GoogleUser.getHostedDomain() on the client,\n   * and the hd claim in the ID Token on the server to verify the domain is what you expected.\n   */\n  hosted_domain?: string;\n\n  /**\n   * Used only for OpenID 2.0 client migration. Set to the value of the realm that you are currently using for OpenID 2.0,\n   * as described in <a href=\"https://developers.google.com/accounts/docs/OpenID#openid-connect\">OpenID 2.0 (Migration)</a>.\n   */\n  openid_realm?: string;\n\n  /**\n   * The UX mode to use for the sign-in flow.\n   * By default, it will open the consent flow in a popup.\n   */\n  ux_mode?: 'popup' | 'redirect';\n\n  /**\n   * If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow.\n   * The default redirect_uri is the current URL stripped of query parameters and hash fragment.\n   */\n  redirect_uri?: string;\n\n  /**\n   * Describes the surface for a particular version of an API.\n   */\n  discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n\n  constructor(clientConfig: NgGapiClientConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  public isMockedState(): boolean {\n    return this.clientConfig.e2e;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n","export class AuthUser {\n  constructor(\n    public id: string,\n    public firstName: string,\n    public lastName: string,\n    public email: string,\n    public avatar: string,\n    public idToken: string,\n    public tokenExpiresAt: number\n  ) { }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { GoogleApiConfig, NgGapiClientConfig } from '../config/google-api.config';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiLoaderService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n  private readonly config: GoogleApiConfig;\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      let node = document.createElement('script');\n      node.src = this.gapiUrl;\n      node.type = 'text/javascript';\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n      node.onload = () => {\n        observer.next(true);\n        observer.complete();\n      };\n    });\n  }\n}\n","/// <reference types=\"gapi.auth2\" />\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport { GoogleApiLoaderService } from './google-api-loader.service';\n\n\n@Injectable()\nexport class GoogleAuth2LoaderService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(private googleApi: GoogleApiLoaderService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGoogleAuth2().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGoogleAuth2()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGoogleAuth2(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n\nimport { GoogleAuth2LoaderService } from './google-auth2-loader.service';\nimport { GoogleApiLoaderService } from './google-api-loader.service';\nimport { AuthUser } from '../models/auth';\n\n\n@Injectable()\nexport class GoogleAuthService {\n  private _authState: ReplaySubject<AuthUser> = new ReplaySubject(1);\n  private auth: gapi.auth2.GoogleAuth;\n\n  get authState(): Observable<AuthUser> {\n    return this._authState.asObservable();\n  }\n\n  constructor(\n    private googleAuth2LoaderService: GoogleAuth2LoaderService,\n    private googleApiLoaderService: GoogleApiLoaderService,\n    private ngZone: NgZone\n  ) {\n\n\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.signIn();\n    } else {\n      this.googleApiLoaderService.onLoad().subscribe(() => {\n        this.googleAuth2LoaderService.getAuth().subscribe(auth => {\n          this.auth = auth;\n          if (this.auth.currentUser.get().isSignedIn()) {\n            this.refreshToken();\n          } else {\n            this._authState.next(null);\n          }\n        });\n        interval(20 * 60 * 1000).pipe(  // run every 20min\n          tap(() => this.refreshToken())\n        ).subscribe();\n      });\n    }\n  }\n\n  public signIn(): void {\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this._authState.next(JSON.parse(localStorage.getItem('user')));\n    } else {\n      this.auth.signIn({\n        prompt: 'select_account',\n        ux_mode: 'redirect',\n        redirect_uri: window.location.origin\n      });\n    }\n  }\n\n  public signOut(): void {\n    if (!this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.auth.signOut();\n    }\n    this._authState.next(null);\n  }\n\n  public refreshToken(): Promise<void> {\n    return this.auth.currentUser.get().reloadAuthResponse().then(r => {\n      this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));\n    });\n  }\n\n  private getProfile(token: string, expiresAt: number): AuthUser {\n    const p = this.auth.currentUser.get().getBasicProfile();\n    return p ? {\n      id: p.getId(),\n      email: p.getEmail(),\n      firstName: p.getGivenName(),\n      lastName: p.getFamilyName(),\n      avatar: p.getImageUrl(),\n      idToken: token,\n      tokenExpiresAt: expiresAt\n    } : null;\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GoogleApiLoaderService } from './services/google-api-loader.service';\nimport { GoogleAuth2LoaderService } from './services/google-auth2-loader.service';\nimport { GoogleAuthService } from './services/google-auth.service';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class GoogleOauthModule {\n  static forRoot(gapiConfigProvider: Provider): ModuleWithProviders {\n    return {\n      ngModule: GoogleOauthModule,\n      providers: [\n        gapiConfigProvider,\n        GoogleApiLoaderService,\n        GoogleAuth2LoaderService,\n        GoogleAuthService\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}