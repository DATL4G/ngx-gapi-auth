{"version":3,"file":"google-auth2-loader.service.js","sourceRoot":"ng://ngx-gapi-auth2/","sources":["lib/services/google-auth2-loader.service.ts"],"names":[],"mappings":";;;;;AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAY,EAAE,EAAE,MAAM,MAAM,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAG1C,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AAIrE,MAAM,OAAO,wBAAwB;;;;IAGnC,YAAoB,SAAiC;QAAjC,cAAS,GAAT,SAAS,CAAwB;QAF7C,eAAU,GAAe,SAAS,CAAC;QAGzC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,SAAS;;;QAAC,GAAG,EAAE;YACrC,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,EAAE,CAAC;QACrC,CAAC,EAAC,CAAC;IACL,CAAC;;;;;IAEM,OAAO,CAAC,WAAW,GAAG,KAAK;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,WAAW,EAAE;YACnC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;iBAC3B,IAAI,CAAC,QAAQ;;;YAAC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,EAAC,CAAC,CAAC;SACjD;QACD,OAAO,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC;;;;;IAEO,eAAe;QACrB,OAAO,IAAI,UAAU;;;;QAAC,CAAC,QAA8B,EAAE,EAAE;YACvD,IAAI,CAAC,IAAI,CAAC,OAAO;;;YAAE,GAAG,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI;;;;gBAAC,CAAC,IAAgB,EAAE,EAAE;oBACtF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACtB,CAAC,EAAC,CAAC,KAAK;;;;gBAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC,CAAC;YAC9C,CAAC,EAAC,CAAC;QACL,CAAC,EAAC,CAAC;IACL,CAAC;;;YA5BF,UAAU;;;;YAHF,sBAAsB;;;;;;;IAK7B,8CAA2C;;;;;IAE/B,6CAAyC","sourcesContent":["/// <reference types=\"gapi.auth2\" />\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport { GoogleApiLoaderService } from './google-api-loader.service';\n\n\n@Injectable()\nexport class GoogleAuth2LoaderService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(private googleApi: GoogleApiLoaderService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGoogleAuth2().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGoogleAuth2()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGoogleAuth2(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n"]}