{"version":3,"file":"google-api.config.js","sourceRoot":"ng://ngx-gapi-auth2/","sources":["lib/config/google-api.config.ts"],"names":[],"mappings":";;;;;;;AAAA,wCAyDC;;;;;;IApDC,iCAAa;;;;;IAKb,uCAAkB;;;;;;IAMlB,2CAAuB;;;;;IAKvB,mCAAe;;;;;IAKf,iDAA8B;;;;;;;IAO9B,2CAAuB;;;;;;IAMvB,0CAAsB;;;;;;IAMtB,qCAA+B;;;;;;IAM/B,0CAAsB;;;;;IAKtB,2CAAwB;;AAG1B;IAGE,yBAAY,YAAgC;QAC1C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;;;;IAEM,uCAAa;;;IAApB;QACE,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;IAC/B,CAAC;;;;IAEM,yCAAe;;;IAAtB;QACE,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IACH,sBAAC;AAAD,CAAC,AAdD,IAcC;;;;;;;IAbC,uCAA2C","sourcesContent":["export interface NgGapiClientConfig {\n\n  /**\n   * User for mocking auth flow to local storage save\n   */\n  e2e: boolean;\n\n  /**\n   * The app's client ID, found and created in the Google Developers Console.\n   */\n  client_id: string;\n\n  /**\n   * The domains for which to create sign-in cookies. Either a URI, single_host_origin, or none.\n   * Defaults to single_host_origin if unspecified.\n   */\n  cookie_policy?: string;\n\n  /**\n   * The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false.\n   */\n  scope?: string;\n\n  /**\n   * Fetch users' basic profile information when they sign in. Adds 'profile' and 'email' to the requested scopes. True if unspecified.\n   */\n  fetch_basic_profile?: boolean;\n\n  /**\n   * The Google Apps domain to which users must belong to sign in. This is susceptible to modification by clients,\n   * so be sure to verify the hosted domain property of the returned user. Use GoogleUser.getHostedDomain() on the client,\n   * and the hd claim in the ID Token on the server to verify the domain is what you expected.\n   */\n  hosted_domain?: string;\n\n  /**\n   * Used only for OpenID 2.0 client migration. Set to the value of the realm that you are currently using for OpenID 2.0,\n   * as described in <a href=\"https://developers.google.com/accounts/docs/OpenID#openid-connect\">OpenID 2.0 (Migration)</a>.\n   */\n  openid_realm?: string;\n\n  /**\n   * The UX mode to use for the sign-in flow.\n   * By default, it will open the consent flow in a popup.\n   */\n  ux_mode?: 'popup' | 'redirect';\n\n  /**\n   * If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow.\n   * The default redirect_uri is the current URL stripped of query parameters and hash fragment.\n   */\n  redirect_uri?: string;\n\n  /**\n   * Describes the surface for a particular version of an API.\n   */\n  discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n\n  constructor(clientConfig: NgGapiClientConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  public isMockedState(): boolean {\n    return this.clientConfig.e2e;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n"]}