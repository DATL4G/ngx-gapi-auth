{"version":3,"file":"google-auth.service.js","sourceRoot":"ng://ngx-gapi-auth2/","sources":["lib/services/google-auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n\nimport { GoogleAuth2LoaderService } from './google-auth2-loader.service';\nimport { GoogleApiLoaderService } from './google-api-loader.service';\nimport { AuthUser } from '../models/auth';\n\n\n@Injectable()\nexport class GoogleAuthService {\n  private _authState: ReplaySubject<AuthUser> = new ReplaySubject(1);\n  private auth: gapi.auth2.GoogleAuth;\n\n  get authState(): Observable<AuthUser> {\n    return this._authState.asObservable();\n  }\n\n  constructor(\n    private googleAuth2LoaderService: GoogleAuth2LoaderService,\n    private googleApiLoaderService: GoogleApiLoaderService,\n    private ngZone: NgZone\n  ) {\n\n\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.signIn();\n    } else {\n      this.googleApiLoaderService.onLoad().subscribe(() => {\n        this.googleAuth2LoaderService.getAuth().subscribe(auth => {\n          this.auth = auth;\n          if (this.auth.currentUser.get().isSignedIn()) {\n            this.refreshToken();\n          } else {\n            this._authState.next(null);\n          }\n        });\n        interval(20 * 60 * 1000).pipe(  // run every 20min\n          tap(() => this.refreshToken())\n        ).subscribe();\n      });\n    }\n  }\n\n  public signIn(): void {\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this._authState.next(JSON.parse(localStorage.getItem('user')));\n    } else {\n      this.auth.signIn({\n        prompt: 'select_account',\n        ux_mode: 'redirect',\n        redirect_uri: window.location.origin\n      });\n    }\n  }\n\n  public signOut(): void {\n    if (!this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.auth.signOut();\n    }\n    this._authState.next(null);\n  }\n\n  public refreshToken(): Promise<void> {\n    return this.auth.currentUser.get().reloadAuthResponse().then(r => {\n      this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));\n    });\n  }\n\n  private getProfile(token: string, expiresAt: number): AuthUser {\n    const p = this.auth.currentUser.get().getBasicProfile();\n    return p ? {\n      id: p.getId(),\n      email: p.getEmail(),\n      firstName: p.getGivenName(),\n      lastName: p.getFamilyName(),\n      avatar: p.getImageUrl(),\n      idToken: token,\n      tokenExpiresAt: expiresAt\n    } : null;\n  }\n}\n"]}