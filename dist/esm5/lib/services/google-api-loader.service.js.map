{"version":3,"file":"google-api-loader.service.js","sourceRoot":"ng://ngx-gapi-auth2/","sources":["lib/services/google-api-loader.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AACnE,OAAO,EAAE,UAAU,EAAY,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAsB,MAAM,6BAA6B,CAAC;;AAElF,MAAM,KAAK,cAAc,GACvB,IAAI,cAAc,CAAqB,gBAAgB,CAAC;AAE1D;IAKE,gCAAoC,MAA0B;QAH7C,YAAO,GAAW,mCAAmC,CAAC;QAIrE,IAAI,CAAC,MAAM,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAC;;;;IAEM,uCAAM;;;IAAb;QACE,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;;;;IAEM,0CAAS;;;IAAhB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;;;;IAEO,yCAAQ;;;;IAAhB;QAAA,iBAYC;QAXC,OAAO,IAAI,UAAU;;;;QAAC,UAAC,QAA2B;;gBAC5C,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;YAC3C,IAAI,CAAC,GAAG,GAAG,KAAI,CAAC,OAAO,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;YAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM;;;YAAG;gBACZ,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACtB,CAAC,CAAA,CAAC;QACJ,CAAC,EAAC,CAAC;IACL,CAAC;;gBA9BF,UAAU;;;;gDAKI,MAAM,SAAC,cAAc;;IA0BpC,6BAAC;CAAA,AA/BD,IA+BC;SA9BY,sBAAsB;;;;;;IACjC,yCAAuE;;;;;IACvE,wCAAyC","sourcesContent":["import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { GoogleApiConfig, NgGapiClientConfig } from '../config/google-api.config';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiLoaderService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n  private readonly config: GoogleApiConfig;\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      let node = document.createElement('script');\n      node.src = this.gapiUrl;\n      node.type = 'text/javascript';\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n      node.onload = () => {\n        observer.next(true);\n        observer.complete();\n      };\n    });\n  }\n}\n"]}