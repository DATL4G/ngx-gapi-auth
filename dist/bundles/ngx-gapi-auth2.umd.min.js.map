{"version":3,"sources":["ng://ngx-gapi-auth2/lib/config/google-api.config.ts","ng://ngx-gapi-auth2/lib/models/auth.ts","ng://ngx-gapi-auth2/lib/services/google-api-loader.service.ts","ng://ngx-gapi-auth2/lib/services/google-auth2-loader.service.ts","ng://ngx-gapi-auth2/lib/services/google-auth.service.ts","ng://ngx-gapi-auth2/lib/common-util-google-oauth.module.ts"],"names":["GoogleApiConfig","clientConfig","this","prototype","isMockedState","e2e","getClientConfig","AuthUser","id","firstName","lastName","email","avatar","idToken","tokenExpiresAt","NG_GAPI_CONFIG","InjectionToken","GoogleApiLoaderService","config","gapiUrl","loadGapi","subscribe","onLoad","getConfig","_this","Observable","observer","node","document","createElement","src","type","charset","getElementsByTagName","appendChild","onload","next","complete","Injectable","Inject","args","GoogleAuth2LoaderService","googleApi","GoogleAuth","undefined","loadGoogleAuth2","getAuth","newInstance","pipe","mergeMap","of","gapi","load","auth2","init","then","auth","catch","err","error","GoogleAuthService","googleAuth2LoaderService","googleApiLoaderService","ngZone","_authState","ReplaySubject","signIn","currentUser","get","isSignedIn","refreshToken","interval","tap","Object","defineProperty","asObservable","JSON","parse","localStorage","getItem","prompt","ux_mode","redirect_uri","window","location","origin","signOut","reloadAuthResponse","r","run","getProfile","id_token","expires_at","token","expiresAt","p","getBasicProfile","getId","getEmail","getGivenName","getFamilyName","getImageUrl","NgZone","GoogleOauthModule","forRoot","gapiConfigProvider","ngModule","providers","NgModule","imports","CommonModule"],"mappings":"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","sourcesContent":["export interface NgGapiClientConfig {\n\n  /**\n   * User for mocking auth flow to local storage save\n   */\n  e2e: boolean;\n\n  /**\n   * The app's client ID, found and created in the Google Developers Console.\n   */\n  client_id: string;\n\n  /**\n   * The domains for which to create sign-in cookies. Either a URI, single_host_origin, or none.\n   * Defaults to single_host_origin if unspecified.\n   */\n  cookie_policy?: string;\n\n  /**\n   * The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false.\n   */\n  scope?: string;\n\n  /**\n   * Fetch users' basic profile information when they sign in. Adds 'profile' and 'email' to the requested scopes. True if unspecified.\n   */\n  fetch_basic_profile?: boolean;\n\n  /**\n   * The Google Apps domain to which users must belong to sign in. This is susceptible to modification by clients,\n   * so be sure to verify the hosted domain property of the returned user. Use GoogleUser.getHostedDomain() on the client,\n   * and the hd claim in the ID Token on the server to verify the domain is what you expected.\n   */\n  hosted_domain?: string;\n\n  /**\n   * Used only for OpenID 2.0 client migration. Set to the value of the realm that you are currently using for OpenID 2.0,\n   * as described in <a href=\"https://developers.google.com/accounts/docs/OpenID#openid-connect\">OpenID 2.0 (Migration)</a>.\n   */\n  openid_realm?: string;\n\n  /**\n   * The UX mode to use for the sign-in flow.\n   * By default, it will open the consent flow in a popup.\n   */\n  ux_mode?: 'popup' | 'redirect';\n\n  /**\n   * If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow.\n   * The default redirect_uri is the current URL stripped of query parameters and hash fragment.\n   */\n  redirect_uri?: string;\n\n  /**\n   * Describes the surface for a particular version of an API.\n   */\n  discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n\n  constructor(clientConfig: NgGapiClientConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  public isMockedState(): boolean {\n    return this.clientConfig.e2e;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n","export class AuthUser {\n  constructor(\n    public id: string,\n    public firstName: string,\n    public lastName: string,\n    public email: string,\n    public avatar: string,\n    public idToken: string,\n    public tokenExpiresAt: number\n  ) { }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { GoogleApiConfig, NgGapiClientConfig } from '../config/google-api.config';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiLoaderService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n  private readonly config: GoogleApiConfig;\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      let node = document.createElement('script');\n      node.src = this.gapiUrl;\n      node.type = 'text/javascript';\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n      node.onload = () => {\n        observer.next(true);\n        observer.complete();\n      };\n    });\n  }\n}\n","/// <reference types=\"gapi.auth2\" />\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport { GoogleApiLoaderService } from './google-api-loader.service';\n\n\n@Injectable()\nexport class GoogleAuth2LoaderService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(private googleApi: GoogleApiLoaderService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGoogleAuth2().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGoogleAuth2()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGoogleAuth2(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n\nimport { GoogleAuth2LoaderService } from './google-auth2-loader.service';\nimport { GoogleApiLoaderService } from './google-api-loader.service';\nimport { AuthUser } from '../models/auth';\n\n\n@Injectable()\nexport class GoogleAuthService {\n  private _authState: ReplaySubject<AuthUser> = new ReplaySubject(1);\n  private auth: gapi.auth2.GoogleAuth;\n\n  get authState(): Observable<AuthUser> {\n    return this._authState.asObservable();\n  }\n\n  constructor(\n    private googleAuth2LoaderService: GoogleAuth2LoaderService,\n    private googleApiLoaderService: GoogleApiLoaderService,\n    private ngZone: NgZone\n  ) {\n\n\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.signIn();\n    } else {\n      this.googleApiLoaderService.onLoad().subscribe(() => {\n        this.googleAuth2LoaderService.getAuth().subscribe(auth => {\n          this.auth = auth;\n          if (this.auth.currentUser.get().isSignedIn()) {\n            this.refreshToken();\n          } else {\n            this._authState.next(null);\n          }\n        });\n        interval(20 * 60 * 1000).pipe(  // run every 20min\n          tap(() => this.refreshToken())\n        ).subscribe();\n      });\n    }\n  }\n\n  public signIn(): void {\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this._authState.next(JSON.parse(localStorage.getItem('user')));\n    } else {\n      this.auth.signIn({\n        prompt: 'select_account',\n        ux_mode: 'redirect',\n        redirect_uri: window.location.origin\n      });\n    }\n  }\n\n  public signOut(): void {\n    if (!this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.auth.signOut();\n    }\n    this._authState.next(null);\n  }\n\n  public refreshToken(): Promise<void> {\n    return this.auth.currentUser.get().reloadAuthResponse().then(r => {\n      this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));\n    });\n  }\n\n  private getProfile(token: string, expiresAt: number): AuthUser {\n    const p = this.auth.currentUser.get().getBasicProfile();\n    return p ? {\n      id: p.getId(),\n      email: p.getEmail(),\n      firstName: p.getGivenName(),\n      lastName: p.getFamilyName(),\n      avatar: p.getImageUrl(),\n      idToken: token,\n      tokenExpiresAt: expiresAt\n    } : null;\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GoogleApiLoaderService } from './services/google-api-loader.service';\nimport { GoogleAuth2LoaderService } from './services/google-auth2-loader.service';\nimport { GoogleAuthService } from './services/google-auth.service';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class GoogleOauthModule {\n  static forRoot(gapiConfigProvider: Provider): ModuleWithProviders {\n    return {\n      ngModule: GoogleOauthModule,\n      providers: [\n        gapiConfigProvider,\n        GoogleApiLoaderService,\n        GoogleAuth2LoaderService,\n        GoogleAuthService\n      ]\n    };\n  }\n}\n"]}