{"version":3,"file":"ngx-gapi-auth2.umd.js","sources":["ng://ngx-gapi-auth2/lib/config/google-api.config.ts","ng://ngx-gapi-auth2/lib/models/auth.ts","ng://ngx-gapi-auth2/lib/services/google-api-loader.service.ts","ng://ngx-gapi-auth2/lib/services/google-auth2-loader.service.ts","ng://ngx-gapi-auth2/lib/services/google-auth.service.ts","ng://ngx-gapi-auth2/lib/common-util-google-oauth.module.ts"],"sourcesContent":["export interface NgGapiClientConfig {\n\n  /**\n   * User for mocking auth flow to local storage save\n   */\n  e2e: boolean;\n\n  /**\n   * The app's client ID, found and created in the Google Developers Console.\n   */\n  client_id: string;\n\n  /**\n   * The domains for which to create sign-in cookies. Either a URI, single_host_origin, or none.\n   * Defaults to single_host_origin if unspecified.\n   */\n  cookie_policy?: string;\n\n  /**\n   * The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false.\n   */\n  scope?: string;\n\n  /**\n   * Fetch users' basic profile information when they sign in. Adds 'profile' and 'email' to the requested scopes. True if unspecified.\n   */\n  fetch_basic_profile?: boolean;\n\n  /**\n   * The Google Apps domain to which users must belong to sign in. This is susceptible to modification by clients,\n   * so be sure to verify the hosted domain property of the returned user. Use GoogleUser.getHostedDomain() on the client,\n   * and the hd claim in the ID Token on the server to verify the domain is what you expected.\n   */\n  hosted_domain?: string;\n\n  /**\n   * Used only for OpenID 2.0 client migration. Set to the value of the realm that you are currently using for OpenID 2.0,\n   * as described in <a href=\"https://developers.google.com/accounts/docs/OpenID#openid-connect\">OpenID 2.0 (Migration)</a>.\n   */\n  openid_realm?: string;\n\n  /**\n   * The UX mode to use for the sign-in flow.\n   * By default, it will open the consent flow in a popup.\n   */\n  ux_mode?: 'popup' | 'redirect';\n\n  /**\n   * If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow.\n   * The default redirect_uri is the current URL stripped of query parameters and hash fragment.\n   */\n  redirect_uri?: string;\n\n  /**\n   * Describes the surface for a particular version of an API.\n   */\n  discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n\n  constructor(clientConfig: NgGapiClientConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  public isMockedState(): boolean {\n    return this.clientConfig.e2e;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n","export class AuthUser {\n  constructor(\n    public id: string,\n    public firstName: string,\n    public lastName: string,\n    public email: string,\n    public avatar: string,\n    public idToken: string,\n    public tokenExpiresAt: number\n  ) { }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { GoogleApiConfig, NgGapiClientConfig } from '../config/google-api.config';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiLoaderService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n  private readonly config: GoogleApiConfig;\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      let node = document.createElement('script');\n      node.src = this.gapiUrl;\n      node.type = 'text/javascript';\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n      node.onload = () => {\n        observer.next(true);\n        observer.complete();\n      };\n    });\n  }\n}\n","/// <reference types=\"gapi.auth2\" />\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport { GoogleApiLoaderService } from './google-api-loader.service';\n\n\n@Injectable()\nexport class GoogleAuth2LoaderService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(private googleApi: GoogleApiLoaderService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGoogleAuth2().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGoogleAuth2()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGoogleAuth2(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n\nimport { GoogleAuth2LoaderService } from './google-auth2-loader.service';\nimport { GoogleApiLoaderService } from './google-api-loader.service';\nimport { AuthUser } from '../models/auth';\n\n\n@Injectable()\nexport class GoogleAuthService {\n  private _authState: ReplaySubject<AuthUser> = new ReplaySubject(1);\n  private auth: gapi.auth2.GoogleAuth;\n\n  get authState(): Observable<AuthUser> {\n    return this._authState.asObservable();\n  }\n\n  constructor(\n    private googleAuth2LoaderService: GoogleAuth2LoaderService,\n    private googleApiLoaderService: GoogleApiLoaderService,\n    private ngZone: NgZone\n  ) {\n\n\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.signIn();\n    } else {\n      this.googleApiLoaderService.onLoad().subscribe(() => {\n        this.googleAuth2LoaderService.getAuth().subscribe(auth => {\n          this.auth = auth;\n          if (this.auth.currentUser.get().isSignedIn()) {\n            this.refreshToken();\n          } else {\n            this._authState.next(null);\n          }\n        });\n        interval(20 * 60 * 1000).pipe(  // run every 20min\n          tap(() => this.refreshToken())\n        ).subscribe();\n      });\n    }\n  }\n\n  public signIn(): void {\n    if (this.googleApiLoaderService.getConfig().isMockedState()) {\n      this._authState.next(JSON.parse(localStorage.getItem('user')));\n    } else {\n      this.auth.signIn({\n        prompt: 'select_account',\n        ux_mode: 'redirect',\n        redirect_uri: window.location.origin\n      });\n    }\n  }\n\n  public signOut(): void {\n    if (!this.googleApiLoaderService.getConfig().isMockedState()) {\n      this.auth.signOut();\n    }\n    this._authState.next(null);\n  }\n\n  public refreshToken(): Promise<void> {\n    return this.auth.currentUser.get().reloadAuthResponse().then(r => {\n      this.ngZone.run(() => this._authState.next(this.getProfile(r.id_token, r.expires_at)));\n    });\n  }\n\n  private getProfile(token: string, expiresAt: number): AuthUser {\n    const p = this.auth.currentUser.get().getBasicProfile();\n    return p ? {\n      id: p.getId(),\n      email: p.getEmail(),\n      firstName: p.getGivenName(),\n      lastName: p.getFamilyName(),\n      avatar: p.getImageUrl(),\n      idToken: token,\n      tokenExpiresAt: expiresAt\n    } : null;\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GoogleApiLoaderService } from './services/google-api-loader.service';\nimport { GoogleAuth2LoaderService } from './services/google-auth2-loader.service';\nimport { GoogleAuthService } from './services/google-auth.service';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class GoogleOauthModule {\n  static forRoot(gapiConfigProvider: Provider): ModuleWithProviders {\n    return {\n      ngModule: GoogleOauthModule,\n      providers: [\n        gapiConfigProvider,\n        GoogleApiLoaderService,\n        GoogleAuth2LoaderService,\n        GoogleAuthService\n      ]\n    };\n  }\n}\n"],"names":["InjectionToken","Observable","Injectable","Inject","mergeMap","of","ReplaySubject","interval","tap","NgZone","NgModule","CommonModule"],"mappings":"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"}